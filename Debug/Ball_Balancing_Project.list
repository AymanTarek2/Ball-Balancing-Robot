
Ball_Balancing_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b54  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d8c  08002d8c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d8c  08002d8c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001114  2000006c  08002e00  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001180  08002e00  00021180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003d07  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000102d  00000000  00000000  00023ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  00024e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000393  00000000  00000000  000252d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001798a  00000000  00000000  00025663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006022  00000000  00000000  0003cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089310  00000000  00000000  0004300f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015bc  00000000  00000000  000cc320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000cd8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002c4c 	.word	0x08002c4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08002c4c 	.word	0x08002c4c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <vApplicationGetIdleTaskMemory+0x28>)
 8000fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <vApplicationGetIdleTaskMemory+0x2c>)
 8000fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000088 	.word	0x20000088
 8000fec:	200000dc 	.word	0x200000dc

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4906      	ldr	r1, [pc, #24]	; (8001024 <__NVIC_EnableIRQ+0x34>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100

08001028 <usart_init>:
int ball_coordinate_y = 15;

char task_x_enable = 0;
char task_y_enable = 0;

void usart_init(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <usart_init+0x30>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a09      	ldr	r2, [pc, #36]	; (8001058 <usart_init+0x30>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001036:	6193      	str	r3, [r2, #24]
	USART1->BRR = 0x45; //115200 baud rate
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <usart_init+0x34>)
 800103a:	2245      	movs	r2, #69	; 0x45
 800103c:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <usart_init+0x34>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <usart_init+0x34>)
 8001044:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001048:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800104c:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 800104e:	2025      	movs	r0, #37	; 0x25
 8001050:	f7ff ffce 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	40013800 	.word	0x40013800

08001060 <USART1_IRQHandler>:

//Interrupt
//Receiving data from Esp32 Cam
void USART1_IRQHandler(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	if (USART1->SR & USART_SR_RXNE) {
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <USART1_IRQHandler+0xf4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	2b00      	cmp	r3, #0
 8001070:	d06b      	beq.n	800114a <USART1_IRQHandler+0xea>
		char received_char = USART1->DR; // Read received character
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <USART1_IRQHandler+0xf4>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	71fb      	strb	r3, [r7, #7]

		if (received_char >= '0' && received_char <= '9')
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b2f      	cmp	r3, #47	; 0x2f
 800107c:	d90c      	bls.n	8001098 <USART1_IRQHandler+0x38>
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b39      	cmp	r3, #57	; 0x39
 8001082:	d809      	bhi.n	8001098 <USART1_IRQHandler+0x38>
			rx_buffer[rx_index++] = received_char;
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <USART1_IRQHandler+0xf8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	b2d1      	uxtb	r1, r2
 800108c:	4a32      	ldr	r2, [pc, #200]	; (8001158 <USART1_IRQHandler+0xf8>)
 800108e:	7011      	strb	r1, [r2, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <USART1_IRQHandler+0xfc>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	5453      	strb	r3, [r2, r1]

        if (received_char == ',' || received_char == '\n') {
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b2c      	cmp	r3, #44	; 0x2c
 800109c:	d002      	beq.n	80010a4 <USART1_IRQHandler+0x44>
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b0a      	cmp	r3, #10
 80010a2:	d119      	bne.n	80010d8 <USART1_IRQHandler+0x78>
        	// Null-terminate buffer to make it a valid string
        	rx_buffer[rx_index] = '\0';
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <USART1_IRQHandler+0xf8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <USART1_IRQHandler+0xfc>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	5499      	strb	r1, [r3, r2]
        	int data = atoi(rx_buffer);
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <USART1_IRQHandler+0xfc>)
 80010b2:	f001 fd0d 	bl	8002ad0 <atoi>
 80010b6:	6038      	str	r0, [r7, #0]

        	rx_index = 0;
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <USART1_IRQHandler+0xf8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]

        	if(received_char == ',')
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b2c      	cmp	r3, #44	; 0x2c
 80010c2:	d103      	bne.n	80010cc <USART1_IRQHandler+0x6c>
        		ball_coordinate_x = data;
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <USART1_IRQHandler+0x100>)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e005      	b.n	80010d8 <USART1_IRQHandler+0x78>
        	else if(received_char == '\n')
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	d102      	bne.n	80010d8 <USART1_IRQHandler+0x78>
        		ball_coordinate_y = data;
 80010d2:	4a24      	ldr	r2, [pc, #144]	; (8001164 <USART1_IRQHandler+0x104>)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	6013      	str	r3, [r2, #0]
		}
		    if(rx_index >= sizeof(rx_buffer) - 1 || received_char == 'A'){
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <USART1_IRQHandler+0xf8>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d802      	bhi.n	80010e6 <USART1_IRQHandler+0x86>
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b41      	cmp	r3, #65	; 0x41
 80010e4:	d108      	bne.n	80010f8 <USART1_IRQHandler+0x98>
		    	rx_buffer[rx_index] = '\0';
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <USART1_IRQHandler+0xf8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <USART1_IRQHandler+0xfc>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	5499      	strb	r1, [r3, r2]
		    	rx_index = 0;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <USART1_IRQHandler+0xf8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
//		    	ball_coordinate_x = 16;
//		    	ball_coordinate_y = 16;
		    }
		    if((ball_coordinate_x >= 1) & (ball_coordinate_x <= 256) & (ball_coordinate_x != 15)){
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <USART1_IRQHandler+0x100>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bfcc      	ite	gt
 8001100:	2301      	movgt	r3, #1
 8001102:	2300      	movle	r3, #0
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <USART1_IRQHandler+0x100>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800110e:	bfd4      	ite	le
 8001110:	2301      	movle	r3, #1
 8001112:	2300      	movgt	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4013      	ands	r3, r2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <USART1_IRQHandler+0x100>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <USART1_IRQHandler+0xde>
		    	GPIOA->ODR |= (1<<6);
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <USART1_IRQHandler+0x108>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <USART1_IRQHandler+0x108>)
 8001136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113a:	60d3      	str	r3, [r2, #12]
		    	//task_x_enable = 1;
		    }
		    else
		    	GPIOA->ODR &= ~(1<<6);
		 }
}
 800113c:	e005      	b.n	800114a <USART1_IRQHandler+0xea>
		    	GPIOA->ODR &= ~(1<<6);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <USART1_IRQHandler+0x108>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <USART1_IRQHandler+0x108>)
 8001144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001148:	60d3      	str	r3, [r2, #12]
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40013800 	.word	0x40013800
 8001158:	200002e6 	.word	0x200002e6
 800115c:	200002dc 	.word	0x200002dc
 8001160:	20000000 	.word	0x20000000
 8001164:	20000004 	.word	0x20000004
 8001168:	40010800 	.word	0x40010800

0800116c <PIDController_Init>:
	/* Controller output */
	float out;

} PIDController;

void PIDController_Init(PIDController *pid) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	pid->integrator = 0.0f;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
	pid->differentiator  = 0.0f;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
	pid->out = 0.0f;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
	...

080011a8 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
    float error = (setpoint - measurement)/200; //distance in metres
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff fbec 	bl	8000994 <__aeabi_fsub>
 80011bc:	4603      	mov	r3, r0
 80011be:	497c      	ldr	r1, [pc, #496]	; (80013b0 <PIDController_Update+0x208>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fda5 	bl	8000d10 <__aeabi_fdiv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	617b      	str	r3, [r7, #20]

    float proportional = pid->Kp * error;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	6978      	ldr	r0, [r7, #20]
 80011d2:	f7ff fce9 	bl	8000ba8 <__aeabi_fmul>
 80011d6:	4603      	mov	r3, r0
 80011d8:	613b      	str	r3, [r7, #16]

    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fcde 	bl	8000ba8 <__aeabi_fmul>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff fcd6 	bl	8000ba8 <__aeabi_fmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461d      	mov	r5, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	6979      	ldr	r1, [r7, #20]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fbc6 	bl	8000998 <__addsf3>
 800120c:	4603      	mov	r3, r0
 800120e:	4619      	mov	r1, r3
 8001210:	4628      	mov	r0, r5
 8001212:	f7ff fcc9 	bl	8000ba8 <__aeabi_fmul>
 8001216:	4603      	mov	r3, r0
 8001218:	4619      	mov	r1, r3
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff fbbc 	bl	8000998 <__addsf3>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	625a      	str	r2, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f7ff fe74 	bl	8000f20 <__aeabi_fcmpgt>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <PIDController_Update+0xa0>
        pid->integrator = pid->limMaxInt;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
 8001246:	e00e      	b.n	8001266 <PIDController_Update+0xbe>
    else if (pid->integrator < pid->limMinInt)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f7ff fe46 	bl	8000ee4 <__aeabi_fcmplt>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <PIDController_Update+0xbe>
    	pid->integrator = pid->limMinInt;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	; 0x24


    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4619      	mov	r1, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb93 	bl	8000998 <__addsf3>
 8001272:	4603      	mov	r3, r0
 8001274:	461c      	mov	r4, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4619      	mov	r1, r3
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fb89 	bl	8000994 <__aeabi_fsub>
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff fc8e 	bl	8000ba8 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4619      	mov	r1, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fb7e 	bl	8000998 <__addsf3>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f7ff fb74 	bl	8000994 <__aeabi_fsub>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4610      	mov	r0, r2
 80012b8:	f7ff fc76 	bl	8000ba8 <__aeabi_fmul>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff fb69 	bl	8000998 <__addsf3>
 80012c6:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80012c8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
                        / (2.0f * pid->tau + pid->T);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fb60 	bl	8000998 <__addsf3>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f7ff fb58 	bl	8000998 <__addsf3>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fd0f 	bl	8000d10 <__aeabi_fdiv>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c

    pid->out = proportional + pid->integrator + pid->differentiator;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	6939      	ldr	r1, [r7, #16]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fb49 	bl	8000998 <__addsf3>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f7ff fb41 	bl	8000998 <__addsf3>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
    //pid->out *= -1;
    if (pid->out > pid->limMax)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4619      	mov	r1, r3
 8001328:	4610      	mov	r0, r2
 800132a:	f7ff fdf9 	bl	8000f20 <__aeabi_fcmpgt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <PIDController_Update+0x196>
        pid->out = pid->limMax;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	635a      	str	r2, [r3, #52]	; 0x34
 800133c:	e00e      	b.n	800135c <PIDController_Update+0x1b4>
    else if (pid->out < pid->limMin)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f7ff fdcb 	bl	8000ee4 <__aeabi_fcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <PIDController_Update+0x1b4>
        pid->out = pid->limMin;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

    pid->prevError = error;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	631a      	str	r2, [r3, #48]	; 0x30

    return (pid->out *16 * 180)/(M_PI *1.8); //convert from rad to degrees then to steps
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fc19 	bl	8000ba8 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	490e      	ldr	r1, [pc, #56]	; (80013b4 <PIDController_Update+0x20c>)
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fc14 	bl	8000ba8 <__aeabi_fmul>
 8001380:	4603      	mov	r3, r0
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f848 	bl	8000418 <__aeabi_f2d>
 8001388:	a307      	add	r3, pc, #28	; (adr r3, 80013a8 <PIDController_Update+0x200>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f9c5 	bl	800071c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff faa7 	bl	80008ec <__aeabi_d2f>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}
 80013a8:	65708efc 	.word	0x65708efc
 80013ac:	40169e95 	.word	0x40169e95
 80013b0:	43480000 	.word	0x43480000
 80013b4:	43340000 	.word	0x43340000

080013b8 <rotate_stepper_motor>:

void rotate_stepper_motor(char dir, char dir_pin, char step_pin , float delay){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	460b      	mov	r3, r1
 80013c6:	71bb      	strb	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	717b      	strb	r3, [r7, #5]
	if(dir)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <rotate_stepper_motor+0x30>
		GPIOA->ODR |= (1<<dir_pin);
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <rotate_stepper_motor+0x9c>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	79ba      	ldrb	r2, [r7, #6]
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <rotate_stepper_motor+0x9c>)
 80013e2:	430b      	orrs	r3, r1
 80013e4:	60d3      	str	r3, [r2, #12]
 80013e6:	e00a      	b.n	80013fe <rotate_stepper_motor+0x46>
	else
		GPIOA->ODR &= ~(1<<dir_pin);
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <rotate_stepper_motor+0x9c>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	43d2      	mvns	r2, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4a16      	ldr	r2, [pc, #88]	; (8001454 <rotate_stepper_motor+0x9c>)
 80013fa:	400b      	ands	r3, r1
 80013fc:	60d3      	str	r3, [r2, #12]

	GPIOA->ODR |= (1<<step_pin);
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <rotate_stepper_motor+0x9c>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	797a      	ldrb	r2, [r7, #5]
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	4611      	mov	r1, r2
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <rotate_stepper_motor+0x9c>)
 800140e:	430b      	orrs	r3, r1
 8001410:	60d3      	str	r3, [r2, #12]
	vTaskDelay(pdMS_TO_TICKS(0.02));
 8001412:	2000      	movs	r0, #0
 8001414:	f000 fc1e 	bl	8001c54 <vTaskDelay>

	GPIOA->ODR &= ~(1<<step_pin);
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <rotate_stepper_motor+0x9c>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	797a      	ldrb	r2, [r7, #5]
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	43d2      	mvns	r2, r2
 8001426:	4611      	mov	r1, r2
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <rotate_stepper_motor+0x9c>)
 800142a:	400b      	ands	r3, r1
 800142c:	60d3      	str	r3, [r2, #12]
	vTaskDelay(pdMS_TO_TICKS(delay));
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f7ff fda6 	bl	8000f80 <__aeabi_f2uiz>
 8001434:	4603      	mov	r3, r0
 8001436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <rotate_stepper_motor+0xa0>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fc04 	bl	8001c54 <vTaskDelay>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010800 	.word	0x40010800
 8001458:	10624dd3 	.word	0x10624dd3

0800145c <pid_control_x>:

//Tasks

void pid_control_x(void *argument){
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b091      	sub	sp, #68	; 0x44
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	PIDController pid_x = {PID_KP_x, PID_KI_x, PID_KD_x,
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	2238      	movs	r2, #56	; 0x38
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fbbb 	bl	8002be8 <memset>
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <pid_control_x+0x80>)
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <pid_control_x+0x84>)
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <pid_control_x+0x88>)
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <pid_control_x+0x8c>)
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <pid_control_x+0x90>)
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <pid_control_x+0x94>)
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <pid_control_x+0x98>)
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <pid_control_x+0x9c>)
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
	PID_TAU, PID_LIM_MIN, PID_LIM_MAX,PID_LIM_MIN_INT,
	PID_LIM_MAX_INT,SAMPLE_TIME_S};
	PIDController_Init(&pid_x);
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe65 	bl	800116c <PIDController_Init>

	for(;;){
//		if(task_x_enable == 0)
//			continue;
		desired_steps_x = PIDController_Update(&pid_x, setPoint_x, ball_coordinate_x);
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <pid_control_x+0xa0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb2a 	bl	8000b00 <__aeabi_i2f>
 80014ac:	4604      	mov	r4, r0
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <pid_control_x+0xa4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb24 	bl	8000b00 <__aeabi_i2f>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4621      	mov	r1, r4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe71 	bl	80011a8 <PIDController_Update>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fd33 	bl	8000f34 <__aeabi_f2iz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <pid_control_x+0xa8>)
 80014d2:	6013      	str	r3, [r2, #0]
		vTaskDelay(pdMS_TO_TICKS(25));
 80014d4:	2019      	movs	r0, #25
 80014d6:	f000 fbbd 	bl	8001c54 <vTaskDelay>
		desired_steps_x = PIDController_Update(&pid_x, setPoint_x, ball_coordinate_x);
 80014da:	e7e2      	b.n	80014a2 <pid_control_x+0x46>
 80014dc:	3de999f8 	.word	0x3de999f8
 80014e0:	3d1a185a 	.word	0x3d1a185a
 80014e4:	3f6fb02e 	.word	0x3f6fb02e
 80014e8:	3c23d70a 	.word	0x3c23d70a
 80014ec:	beb2b021 	.word	0xbeb2b021
 80014f0:	3eb2b021 	.word	0x3eb2b021
 80014f4:	be800000 	.word	0xbe800000
 80014f8:	3ccccccd 	.word	0x3ccccccd
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000000 	.word	0x20000000
 8001504:	200002f0 	.word	0x200002f0

08001508 <pid_control_y>:
	}
}

void pid_control_y(void *argument){
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b091      	sub	sp, #68	; 0x44
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	PIDController pid_y = {PID_KP_y, PID_KI_y, PID_KD_y,
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2238      	movs	r2, #56	; 0x38
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fb65 	bl	8002be8 <memset>
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <pid_control_y+0x80>)
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <pid_control_y+0x84>)
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <pid_control_y+0x88>)
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <pid_control_y+0x8c>)
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <pid_control_y+0x90>)
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <pid_control_y+0x94>)
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <pid_control_y+0x98>)
 8001538:	623b      	str	r3, [r7, #32]
 800153a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <pid_control_y+0x9c>)
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
	PID_TAU, PID_LIM_MIN, PID_LIM_MAX,PID_LIM_MIN_INT,
	PID_LIM_MAX_INT,SAMPLE_TIME_S};
	PIDController_Init(&pid_y);
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe0f 	bl	800116c <PIDController_Init>

	for(;;){
//		if(task_y_enable == 0)
//			continue;
		desired_steps_y = PIDController_Update(&pid_y, setPoint_y, ball_coordinate_y);
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <pid_control_y+0xa0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fad4 	bl	8000b00 <__aeabi_i2f>
 8001558:	4604      	mov	r4, r0
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <pid_control_y+0xa4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff face 	bl	8000b00 <__aeabi_i2f>
 8001564:	4602      	mov	r2, r0
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	4621      	mov	r1, r4
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fe1b 	bl	80011a8 <PIDController_Update>
 8001572:	4603      	mov	r3, r0
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fcdd 	bl	8000f34 <__aeabi_f2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <pid_control_y+0xa8>)
 800157e:	6013      	str	r3, [r2, #0]
		vTaskDelay(pdMS_TO_TICKS(25));
 8001580:	2019      	movs	r0, #25
 8001582:	f000 fb67 	bl	8001c54 <vTaskDelay>
		desired_steps_y = PIDController_Update(&pid_y, setPoint_y, ball_coordinate_y);
 8001586:	e7e2      	b.n	800154e <pid_control_y+0x46>
 8001588:	3de999f8 	.word	0x3de999f8
 800158c:	3d1a185a 	.word	0x3d1a185a
 8001590:	3f6fb02e 	.word	0x3f6fb02e
 8001594:	3c23d70a 	.word	0x3c23d70a
 8001598:	beb2b021 	.word	0xbeb2b021
 800159c:	3eb2b021 	.word	0x3eb2b021
 80015a0:	be800000 	.word	0xbe800000
 80015a4:	3ccccccd 	.word	0x3ccccccd
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	20000004 	.word	0x20000004
 80015b0:	200002f4 	.word	0x200002f4

080015b4 <stepper_motors_response_x>:
	}
}

void stepper_motors_response_x(void *argument){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	float stepper_delay_x = 1.5;
 80015bc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80015c0:	60fb      	str	r3, [r7, #12]
	for(;;){

		if(desired_steps_x > steps_x){
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <stepper_motors_response_x+0x58>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <stepper_motors_response_x+0x5c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dd0b      	ble.n	80015e6 <stepper_motors_response_x+0x32>
			rotate_stepper_motor(0, dir_pin_x, step_pin_x, stepper_delay_x);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2202      	movs	r2, #2
 80015d2:	2100      	movs	r1, #0
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff feef 	bl	80013b8 <rotate_stepper_motor>
			steps_x++;
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <stepper_motors_response_x+0x5c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <stepper_motors_response_x+0x5c>)
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e7ed      	b.n	80015c2 <stepper_motors_response_x+0xe>
		}
		else if(desired_steps_x < steps_x){
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <stepper_motors_response_x+0x58>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <stepper_motors_response_x+0x5c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dae7      	bge.n	80015c2 <stepper_motors_response_x+0xe>
			rotate_stepper_motor(1, dir_pin_x, step_pin_x, stepper_delay_x);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2202      	movs	r2, #2
 80015f6:	2100      	movs	r1, #0
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fedd 	bl	80013b8 <rotate_stepper_motor>
			steps_x--;
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <stepper_motors_response_x+0x5c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	4a02      	ldr	r2, [pc, #8]	; (8001610 <stepper_motors_response_x+0x5c>)
 8001606:	6013      	str	r3, [r2, #0]
		if(desired_steps_x > steps_x){
 8001608:	e7db      	b.n	80015c2 <stepper_motors_response_x+0xe>
 800160a:	bf00      	nop
 800160c:	200002f0 	.word	0x200002f0
 8001610:	200002e8 	.word	0x200002e8

08001614 <stepper_motors_response_y>:
		}
	}
}

void stepper_motors_response_y(void *argument){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	float stepper_delay_y = 1.5;
 800161c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001620:	60fb      	str	r3, [r7, #12]
	for(;;){
		if(desired_steps_y > steps_y){
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <stepper_motors_response_y+0x58>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <stepper_motors_response_y+0x5c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	dd0b      	ble.n	8001646 <stepper_motors_response_y+0x32>
			rotate_stepper_motor(0, dir_pin_y, step_pin_y, stepper_delay_y);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2203      	movs	r2, #3
 8001632:	2101      	movs	r1, #1
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff febf 	bl	80013b8 <rotate_stepper_motor>
			steps_y++;
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <stepper_motors_response_y+0x5c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <stepper_motors_response_y+0x5c>)
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e7ed      	b.n	8001622 <stepper_motors_response_y+0xe>
		}
		else if(desired_steps_y < steps_y){
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <stepper_motors_response_y+0x58>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <stepper_motors_response_y+0x5c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	dae7      	bge.n	8001622 <stepper_motors_response_y+0xe>
			rotate_stepper_motor(1, dir_pin_y, step_pin_y, stepper_delay_y);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2203      	movs	r2, #3
 8001656:	2101      	movs	r1, #1
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fead 	bl	80013b8 <rotate_stepper_motor>
			steps_y--;
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <stepper_motors_response_y+0x5c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a02      	ldr	r2, [pc, #8]	; (8001670 <stepper_motors_response_y+0x5c>)
 8001666:	6013      	str	r3, [r2, #0]
		if(desired_steps_y > steps_y){
 8001668:	e7db      	b.n	8001622 <stepper_motors_response_y+0xe>
 800166a:	bf00      	nop
 800166c:	200002f4 	.word	0x200002f4
 8001670:	200002ec 	.word	0x200002ec

08001674 <main>:
		}
	}
}

int main(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af02      	add	r7, sp, #8
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <main+0x80>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <main+0x80>)
 8001680:	f043 030d 	orr.w	r3, r3, #13
 8001684:	6193      	str	r3, [r2, #24]
	GPIOA->CRL = 0x33333333;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <main+0x84>)
 8001688:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800168c:	601a      	str	r2, [r3, #0]
	GPIOA->CRH = 0x444444B4;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <main+0x84>)
 8001690:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <main+0x88>)
 8001692:	605a      	str	r2, [r3, #4]
	usart_init();
 8001694:	f7ff fcc8 	bl	8001028 <usart_init>
	xTaskCreate(pid_control_x, "PIDx", 128, NULL, 1, NULL);
 8001698:	2300      	movs	r3, #0
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2301      	movs	r3, #1
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	4916      	ldr	r1, [pc, #88]	; (8001700 <main+0x8c>)
 80016a6:	4817      	ldr	r0, [pc, #92]	; (8001704 <main+0x90>)
 80016a8:	f000 f9a5 	bl	80019f6 <xTaskCreate>
	xTaskCreate(pid_control_y, "PIDy", 128, NULL, 1, NULL);
 80016ac:	2300      	movs	r3, #0
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	4913      	ldr	r1, [pc, #76]	; (8001708 <main+0x94>)
 80016ba:	4814      	ldr	r0, [pc, #80]	; (800170c <main+0x98>)
 80016bc:	f000 f99b 	bl	80019f6 <xTaskCreate>
	xTaskCreate(stepper_motors_response_x, "Motor_x", 128, NULL, 1, NULL);
 80016c0:	2300      	movs	r3, #0
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	4910      	ldr	r1, [pc, #64]	; (8001710 <main+0x9c>)
 80016ce:	4811      	ldr	r0, [pc, #68]	; (8001714 <main+0xa0>)
 80016d0:	f000 f991 	bl	80019f6 <xTaskCreate>
	xTaskCreate(stepper_motors_response_y, "Motor_y", 128, NULL, 1, NULL);
 80016d4:	2300      	movs	r3, #0
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2301      	movs	r3, #1
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	490d      	ldr	r1, [pc, #52]	; (8001718 <main+0xa4>)
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <main+0xa8>)
 80016e4:	f000 f987 	bl	80019f6 <xTaskCreate>
	vTaskStartScheduler();
 80016e8:	f000 fae8 	bl	8001cbc <vTaskStartScheduler>
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800
 80016fc:	444444b4 	.word	0x444444b4
 8001700:	08002c64 	.word	0x08002c64
 8001704:	0800145d 	.word	0x0800145d
 8001708:	08002c6c 	.word	0x08002c6c
 800170c:	08001509 	.word	0x08001509
 8001710:	08002c74 	.word	0x08002c74
 8001714:	080015b5 	.word	0x080015b5
 8001718:	08002c7c 	.word	0x08002c7c
 800171c:	08001615 	.word	0x08001615

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f835 	bl	80017bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001752:	f000 fdaf 	bl	80022b4 <xTaskGetSchedulerState>
 8001756:	4603      	mov	r3, r0
 8001758:	2b01      	cmp	r3, #1
 800175a:	d001      	beq.n	8001760 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800175c:	f000 ff9c 	bl	8002698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001770:	f7ff fff8 	bl	8001764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001776:	490c      	ldr	r1, [pc, #48]	; (80017a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800178c:	4c09      	ldr	r4, [pc, #36]	; (80017b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f001 fa33 	bl	8002c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800179e:	f7ff ff69 	bl	8001674 <main>
  bx lr
 80017a2:	4770      	bx	lr
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017ac:	08002d94 	.word	0x08002d94
  ldr r2, =_sbss
 80017b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017b4:	20001180 	.word	0x20001180

080017b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_2_IRQHandler>
	...

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x20>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_IncTick+0x20>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000014 	.word	0x20000014
 80017dc:	200002f8 	.word	0x200002f8

080017e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 0208 	add.w	r2, r3, #8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f103 0208 	add.w	r2, r3, #8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f103 0208 	add.w	r2, r3, #8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001892:	d103      	bne.n	800189c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e00c      	b.n	80018b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3308      	adds	r3, #8
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e002      	b.n	80018aa <vListInsert+0x2e>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d2f6      	bcs.n	80018a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6892      	ldr	r2, [r2, #8]
 8001902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6852      	ldr	r2, [r2, #4]
 800190c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d103      	bne.n	8001920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1e5a      	subs	r2, r3, #1
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800193e:	b580      	push	{r7, lr}
 8001940:	b08e      	sub	sp, #56	; 0x38
 8001942:	af04      	add	r7, sp, #16
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001964:	bf00      	nop
 8001966:	e7fe      	b.n	8001966 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10a      	bne.n	8001984 <xTaskCreateStatic+0x46>
	__asm volatile
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	61fb      	str	r3, [r7, #28]
}
 8001980:	bf00      	nop
 8001982:	e7fe      	b.n	8001982 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001984:	2354      	movs	r3, #84	; 0x54
 8001986:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b54      	cmp	r3, #84	; 0x54
 800198c:	d00a      	beq.n	80019a4 <xTaskCreateStatic+0x66>
	__asm volatile
 800198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001992:	f383 8811 	msr	BASEPRI, r3
 8001996:	f3bf 8f6f 	isb	sy
 800199a:	f3bf 8f4f 	dsb	sy
 800199e:	61bb      	str	r3, [r7, #24]
}
 80019a0:	bf00      	nop
 80019a2:	e7fe      	b.n	80019a2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80019a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01e      	beq.n	80019e8 <xTaskCreateStatic+0xaa>
 80019aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01b      	beq.n	80019e8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80019b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	2202      	movs	r2, #2
 80019be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80019c2:	2300      	movs	r3, #0
 80019c4:	9303      	str	r3, [sp, #12]
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f850 	bl	8001a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80019e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019e2:	f000 f8cd 	bl	8001b80 <prvAddNewTaskToReadyList>
 80019e6:	e001      	b.n	80019ec <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80019ec:	697b      	ldr	r3, [r7, #20]
	}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b08c      	sub	sp, #48	; 0x30
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fe88 	bl	8002720 <pvPortMalloc>
 8001a10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001a18:	2054      	movs	r0, #84	; 0x54
 8001a1a:	f000 fe81 	bl	8002720 <pvPortMalloc>
 8001a1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2c:	e005      	b.n	8001a3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f000 ff3a 	bl	80028a8 <vPortFree>
 8001a34:	e001      	b.n	8001a3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d017      	beq.n	8001a70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9303      	str	r3, [sp, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f80e 	bl	8001a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a64:	69f8      	ldr	r0, [r7, #28]
 8001a66:	f000 f88b 	bl	8001b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	e002      	b.n	8001a76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001a76:	69bb      	ldr	r3, [r7, #24]
	}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f023 0307 	bic.w	r3, r3, #7
 8001aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	f3bf 8f6f 	isb	sy
 8001abe:	f3bf 8f4f 	dsb	sy
 8001ac2:	617b      	str	r3, [r7, #20]
}
 8001ac4:	bf00      	nop
 8001ac6:	e7fe      	b.n	8001ac6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e012      	b.n	8001af4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	7819      	ldrb	r1, [r3, #0]
 8001ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	3334      	adds	r3, #52	; 0x34
 8001ade:	460a      	mov	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	d9e9      	bls.n	8001ace <prvInitialiseNewTask+0x4e>
 8001afa:	e000      	b.n	8001afe <prvInitialiseNewTask+0x7e>
		{
			break;
 8001afc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d901      	bls.n	8001b10 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	2200      	movs	r2, #0
 8001b20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	3304      	adds	r3, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe79 	bl	800181e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	3318      	adds	r3, #24
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe74 	bl	800181e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	f1c3 0207 	rsb	r2, r3, #7
 8001b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	2200      	movs	r2, #0
 8001b50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	69b8      	ldr	r0, [r7, #24]
 8001b60:	f000 fc2c 	bl	80023bc <pxPortInitialiseStack>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b68:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b88:	f000 fd08 	bl	800259c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <prvAddNewTaskToReadyList+0xb8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	3301      	adds	r3, #1
 8001b92:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <prvAddNewTaskToReadyList+0xb8>)
 8001b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <prvAddNewTaskToReadyList+0xbc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b9e:	4a27      	ldr	r2, [pc, #156]	; (8001c3c <prvAddNewTaskToReadyList+0xbc>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <prvAddNewTaskToReadyList+0xb8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d110      	bne.n	8001bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001bac:	f000 fac0 	bl	8002130 <prvInitialiseTaskLists>
 8001bb0:	e00d      	b.n	8001bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <prvAddNewTaskToReadyList+0xc0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <prvAddNewTaskToReadyList+0xbc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d802      	bhi.n	8001bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <prvAddNewTaskToReadyList+0xbc>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <prvAddNewTaskToReadyList+0xc4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <prvAddNewTaskToReadyList+0xc4>)
 8001bd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	2201      	movs	r2, #1
 8001bde:	409a      	lsls	r2, r3
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <prvAddNewTaskToReadyList+0xc8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <prvAddNewTaskToReadyList+0xc8>)
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <prvAddNewTaskToReadyList+0xcc>)
 8001bf8:	441a      	add	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4610      	mov	r0, r2
 8001c02:	f7ff fe18 	bl	8001836 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c06:	f000 fcf9 	bl	80025fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <prvAddNewTaskToReadyList+0xc0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00e      	beq.n	8001c30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <prvAddNewTaskToReadyList+0xbc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <prvAddNewTaskToReadyList+0xd0>)
 8001c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200003fc 	.word	0x200003fc
 8001c3c:	200002fc 	.word	0x200002fc
 8001c40:	20000408 	.word	0x20000408
 8001c44:	20000418 	.word	0x20000418
 8001c48:	20000404 	.word	0x20000404
 8001c4c:	20000300 	.word	0x20000300
 8001c50:	e000ed04 	.word	0xe000ed04

08001c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d017      	beq.n	8001c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <vTaskDelay+0x60>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <vTaskDelay+0x30>
	__asm volatile
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	60bb      	str	r3, [r7, #8]
}
 8001c80:	bf00      	nop
 8001c82:	e7fe      	b.n	8001c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001c84:	f000 f87a 	bl	8001d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c88:	2100      	movs	r1, #0
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fb30 	bl	80022f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001c90:	f000 f882 	bl	8001d98 <xTaskResumeAll>
 8001c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <vTaskDelay+0x64>)
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000424 	.word	0x20000424
 8001cb8:	e000ed04 	.word	0xe000ed04

08001cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001cca:	463a      	mov	r2, r7
 8001ccc:	1d39      	adds	r1, r7, #4
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f974 	bl	8000fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001cd8:	6839      	ldr	r1, [r7, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	9202      	str	r2, [sp, #8]
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	491e      	ldr	r1, [pc, #120]	; (8001d64 <vTaskStartScheduler+0xa8>)
 8001cec:	481e      	ldr	r0, [pc, #120]	; (8001d68 <vTaskStartScheduler+0xac>)
 8001cee:	f7ff fe26 	bl	800193e <xTaskCreateStatic>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <vTaskStartScheduler+0xb0>)
 8001cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <vTaskStartScheduler+0xb0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001d00:	2301      	movs	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e001      	b.n	8001d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d116      	bne.n	8001d3e <vTaskStartScheduler+0x82>
	__asm volatile
 8001d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	613b      	str	r3, [r7, #16]
}
 8001d22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <vTaskStartScheduler+0xb4>)
 8001d26:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <vTaskStartScheduler+0xb8>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <vTaskStartScheduler+0xbc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001d38:	f000 fbbe 	bl	80024b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001d3c:	e00e      	b.n	8001d5c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d10a      	bne.n	8001d5c <vTaskStartScheduler+0xa0>
	__asm volatile
 8001d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4a:	f383 8811 	msr	BASEPRI, r3
 8001d4e:	f3bf 8f6f 	isb	sy
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	60fb      	str	r3, [r7, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	e7fe      	b.n	8001d5a <vTaskStartScheduler+0x9e>
}
 8001d5c:	bf00      	nop
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	08002c84 	.word	0x08002c84
 8001d68:	08002101 	.word	0x08002101
 8001d6c:	20000420 	.word	0x20000420
 8001d70:	2000041c 	.word	0x2000041c
 8001d74:	20000408 	.word	0x20000408
 8001d78:	20000400 	.word	0x20000400

08001d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <vTaskSuspendAll+0x18>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <vTaskSuspendAll+0x18>)
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000424 	.word	0x20000424

08001d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <xTaskResumeAll+0x114>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	603b      	str	r3, [r7, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	e7fe      	b.n	8001dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001dc4:	f000 fbea 	bl	800259c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001dc8:	4b38      	ldr	r3, [pc, #224]	; (8001eac <xTaskResumeAll+0x114>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	4a37      	ldr	r2, [pc, #220]	; (8001eac <xTaskResumeAll+0x114>)
 8001dd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <xTaskResumeAll+0x114>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d161      	bne.n	8001e9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <xTaskResumeAll+0x118>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d05d      	beq.n	8001e9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001de2:	e02e      	b.n	8001e42 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <xTaskResumeAll+0x11c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3318      	adds	r3, #24
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fd7b 	bl	80018ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fd76 	bl	80018ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2201      	movs	r2, #1
 8001e06:	409a      	lsls	r2, r3
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <xTaskResumeAll+0x120>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <xTaskResumeAll+0x120>)
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <xTaskResumeAll+0x124>)
 8001e20:	441a      	add	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4610      	mov	r0, r2
 8001e2a:	f7ff fd04 	bl	8001836 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <xTaskResumeAll+0x128>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d302      	bcc.n	8001e42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <xTaskResumeAll+0x12c>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <xTaskResumeAll+0x11c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1cc      	bne.n	8001de4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001e50:	f000 fa0c 	bl	800226c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <xTaskResumeAll+0x130>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d010      	beq.n	8001e82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001e60:	f000 f836 	bl	8001ed0 <xTaskIncrementTick>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <xTaskResumeAll+0x12c>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f1      	bne.n	8001e60 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <xTaskResumeAll+0x130>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <xTaskResumeAll+0x12c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <xTaskResumeAll+0x134>)
 8001e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e9e:	f000 fbad 	bl	80025fc <vPortExitCritical>

	return xAlreadyYielded;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000424 	.word	0x20000424
 8001eb0:	200003fc 	.word	0x200003fc
 8001eb4:	200003bc 	.word	0x200003bc
 8001eb8:	20000404 	.word	0x20000404
 8001ebc:	20000300 	.word	0x20000300
 8001ec0:	200002fc 	.word	0x200002fc
 8001ec4:	20000410 	.word	0x20000410
 8001ec8:	2000040c 	.word	0x2000040c
 8001ecc:	e000ed04 	.word	0xe000ed04

08001ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eda:	4b51      	ldr	r3, [pc, #324]	; (8002020 <xTaskIncrementTick+0x150>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 808d 	bne.w	8001ffe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <xTaskIncrementTick+0x154>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001eec:	4a4d      	ldr	r2, [pc, #308]	; (8002024 <xTaskIncrementTick+0x154>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d120      	bne.n	8001f3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <xTaskIncrementTick+0x158>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <xTaskIncrementTick+0x48>
	__asm volatile
 8001f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	603b      	str	r3, [r7, #0]
}
 8001f14:	bf00      	nop
 8001f16:	e7fe      	b.n	8001f16 <xTaskIncrementTick+0x46>
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <xTaskIncrementTick+0x158>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b43      	ldr	r3, [pc, #268]	; (800202c <xTaskIncrementTick+0x15c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a41      	ldr	r2, [pc, #260]	; (8002028 <xTaskIncrementTick+0x158>)
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4a41      	ldr	r2, [pc, #260]	; (800202c <xTaskIncrementTick+0x15c>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <xTaskIncrementTick+0x160>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <xTaskIncrementTick+0x160>)
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	f000 f999 	bl	800226c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <xTaskIncrementTick+0x164>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d34d      	bcc.n	8001fe0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <xTaskIncrementTick+0x158>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <xTaskIncrementTick+0x82>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <xTaskIncrementTick+0x84>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <xTaskIncrementTick+0x164>)
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	601a      	str	r2, [r3, #0]
					break;
 8001f60:	e03e      	b.n	8001fe0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <xTaskIncrementTick+0x158>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d203      	bcs.n	8001f82 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f7a:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <xTaskIncrementTick+0x164>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6013      	str	r3, [r2, #0]
						break;
 8001f80:	e02e      	b.n	8001fe0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3304      	adds	r3, #4
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fcb0 	bl	80018ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3318      	adds	r3, #24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fca7 	bl	80018ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <xTaskIncrementTick+0x168>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	4a22      	ldr	r2, [pc, #136]	; (8002038 <xTaskIncrementTick+0x168>)
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <xTaskIncrementTick+0x16c>)
 8001fbe:	441a      	add	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f7ff fc35 	bl	8001836 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <xTaskIncrementTick+0x170>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d3b4      	bcc.n	8001f44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fde:	e7b1      	b.n	8001f44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <xTaskIncrementTick+0x170>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe6:	4915      	ldr	r1, [pc, #84]	; (800203c <xTaskIncrementTick+0x16c>)
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d907      	bls.n	8002008 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e004      	b.n	8002008 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <xTaskIncrementTick+0x174>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <xTaskIncrementTick+0x174>)
 8002006:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <xTaskIncrementTick+0x178>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002010:	2301      	movs	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002014:	697b      	ldr	r3, [r7, #20]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000424 	.word	0x20000424
 8002024:	20000400 	.word	0x20000400
 8002028:	200003b4 	.word	0x200003b4
 800202c:	200003b8 	.word	0x200003b8
 8002030:	20000414 	.word	0x20000414
 8002034:	2000041c 	.word	0x2000041c
 8002038:	20000404 	.word	0x20000404
 800203c:	20000300 	.word	0x20000300
 8002040:	200002fc 	.word	0x200002fc
 8002044:	2000040c 	.word	0x2000040c
 8002048:	20000410 	.word	0x20000410

0800204c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <vTaskSwitchContext+0xa0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <vTaskSwitchContext+0xa4>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002060:	e03f      	b.n	80020e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <vTaskSwitchContext+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <vTaskSwitchContext+0xa8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002076:	7afb      	ldrb	r3, [r7, #11]
 8002078:	f1c3 031f 	rsb	r3, r3, #31
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	491e      	ldr	r1, [pc, #120]	; (80020f8 <vTaskSwitchContext+0xac>)
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	607b      	str	r3, [r7, #4]
}
 80020a4:	bf00      	nop
 80020a6:	e7fe      	b.n	80020a6 <vTaskSwitchContext+0x5a>
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <vTaskSwitchContext+0xac>)
 80020b4:	4413      	add	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	3308      	adds	r3, #8
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d104      	bne.n	80020d8 <vTaskSwitchContext+0x8c>
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4a07      	ldr	r2, [pc, #28]	; (80020fc <vTaskSwitchContext+0xb0>)
 80020e0:	6013      	str	r3, [r2, #0]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	20000424 	.word	0x20000424
 80020f0:	20000410 	.word	0x20000410
 80020f4:	20000404 	.word	0x20000404
 80020f8:	20000300 	.word	0x20000300
 80020fc:	200002fc 	.word	0x200002fc

08002100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002108:	f000 f852 	bl	80021b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <prvIdleTask+0x28>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d9f9      	bls.n	8002108 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <prvIdleTask+0x2c>)
 8002116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002124:	e7f0      	b.n	8002108 <prvIdleTask+0x8>
 8002126:	bf00      	nop
 8002128:	20000300 	.word	0x20000300
 800212c:	e000ed04 	.word	0xe000ed04

08002130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	e00c      	b.n	8002156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <prvInitialiseTaskLists+0x60>)
 8002148:	4413      	add	r3, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fb48 	bl	80017e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3301      	adds	r3, #1
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b06      	cmp	r3, #6
 800215a:	d9ef      	bls.n	800213c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800215c:	480d      	ldr	r0, [pc, #52]	; (8002194 <prvInitialiseTaskLists+0x64>)
 800215e:	f7ff fb3f 	bl	80017e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002162:	480d      	ldr	r0, [pc, #52]	; (8002198 <prvInitialiseTaskLists+0x68>)
 8002164:	f7ff fb3c 	bl	80017e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <prvInitialiseTaskLists+0x6c>)
 800216a:	f7ff fb39 	bl	80017e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800216e:	480c      	ldr	r0, [pc, #48]	; (80021a0 <prvInitialiseTaskLists+0x70>)
 8002170:	f7ff fb36 	bl	80017e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <prvInitialiseTaskLists+0x74>)
 8002176:	f7ff fb33 	bl	80017e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <prvInitialiseTaskLists+0x78>)
 800217c:	4a05      	ldr	r2, [pc, #20]	; (8002194 <prvInitialiseTaskLists+0x64>)
 800217e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <prvInitialiseTaskLists+0x7c>)
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <prvInitialiseTaskLists+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000300 	.word	0x20000300
 8002194:	2000038c 	.word	0x2000038c
 8002198:	200003a0 	.word	0x200003a0
 800219c:	200003bc 	.word	0x200003bc
 80021a0:	200003d0 	.word	0x200003d0
 80021a4:	200003e8 	.word	0x200003e8
 80021a8:	200003b4 	.word	0x200003b4
 80021ac:	200003b8 	.word	0x200003b8

080021b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021b6:	e019      	b.n	80021ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80021b8:	f000 f9f0 	bl	800259c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <prvCheckTasksWaitingTermination+0x50>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fb8f 	bl	80018ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <prvCheckTasksWaitingTermination+0x54>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <prvCheckTasksWaitingTermination+0x54>)
 80021d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <prvCheckTasksWaitingTermination+0x58>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3b01      	subs	r3, #1
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <prvCheckTasksWaitingTermination+0x58>)
 80021e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80021e2:	f000 fa0b 	bl	80025fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f810 	bl	800220c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <prvCheckTasksWaitingTermination+0x58>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e1      	bne.n	80021b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200003d0 	.word	0x200003d0
 8002204:	200003fc 	.word	0x200003fc
 8002208:	200003e4 	.word	0x200003e4

0800220c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fb40 	bl	80028a8 <vPortFree>
				vPortFree( pxTCB );
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fb3d 	bl	80028a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800222e:	e018      	b.n	8002262 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002236:	2b01      	cmp	r3, #1
 8002238:	d103      	bne.n	8002242 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fb34 	bl	80028a8 <vPortFree>
	}
 8002240:	e00f      	b.n	8002262 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002248:	2b02      	cmp	r3, #2
 800224a:	d00a      	beq.n	8002262 <prvDeleteTCB+0x56>
	__asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	60fb      	str	r3, [r7, #12]
}
 800225e:	bf00      	nop
 8002260:	e7fe      	b.n	8002260 <prvDeleteTCB+0x54>
	}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <prvResetNextTaskUnblockTime+0x40>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <prvResetNextTaskUnblockTime+0x14>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <prvResetNextTaskUnblockTime+0x16>
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <prvResetNextTaskUnblockTime+0x44>)
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800228e:	e008      	b.n	80022a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <prvResetNextTaskUnblockTime+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <prvResetNextTaskUnblockTime+0x44>)
 80022a0:	6013      	str	r3, [r2, #0]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	200003b4 	.word	0x200003b4
 80022b0:	2000041c 	.word	0x2000041c

080022b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <xTaskGetSchedulerState+0x34>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80022c2:	2301      	movs	r3, #1
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	e008      	b.n	80022da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <xTaskGetSchedulerState+0x38>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80022d0:	2302      	movs	r3, #2
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	e001      	b.n	80022da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80022da:	687b      	ldr	r3, [r7, #4]
	}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000408 	.word	0x20000408
 80022ec:	20000424 	.word	0x20000424

080022f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3304      	adds	r3, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff faf0 	bl	80018ec <uxListRemove>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	2201      	movs	r2, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4013      	ands	r3, r2
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002328:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d10a      	bne.n	8002348 <prvAddCurrentTaskToDelayedList+0x58>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3304      	adds	r3, #4
 800233e:	4619      	mov	r1, r3
 8002340:	481a      	ldr	r0, [pc, #104]	; (80023ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8002342:	f7ff fa78 	bl	8001836 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002346:	e026      	b.n	8002396 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d209      	bcs.n	8002374 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3304      	adds	r3, #4
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f7ff fa85 	bl	800187c <vListInsert>
}
 8002372:	e010      	b.n	8002396 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f7ff fa7b 	bl	800187c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	429a      	cmp	r2, r3
 800238e:	d202      	bcs.n	8002396 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002390:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6013      	str	r3, [r2, #0]
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000400 	.word	0x20000400
 80023a4:	200002fc 	.word	0x200002fc
 80023a8:	20000404 	.word	0x20000404
 80023ac:	200003e8 	.word	0x200003e8
 80023b0:	200003b8 	.word	0x200003b8
 80023b4:	200003b4 	.word	0x200003b4
 80023b8:	2000041c 	.word	0x2000041c

080023bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3b04      	subs	r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3b04      	subs	r3, #4
 80023da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f023 0201 	bic.w	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3b04      	subs	r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80023ec:	4a08      	ldr	r2, [pc, #32]	; (8002410 <pxPortInitialiseStack+0x54>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3b14      	subs	r3, #20
 80023f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b20      	subs	r3, #32
 8002402:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002404:	68fb      	ldr	r3, [r7, #12]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	08002415 	.word	0x08002415

08002414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <prvTaskExitError+0x54>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d00a      	beq.n	800243e <prvTaskExitError+0x2a>
	__asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	60fb      	str	r3, [r7, #12]
}
 800243a:	bf00      	nop
 800243c:	e7fe      	b.n	800243c <prvTaskExitError+0x28>
	__asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	60bb      	str	r3, [r7, #8]
}
 8002450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002452:	bf00      	nop
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0fc      	beq.n	8002454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000018 	.word	0x20000018
 800246c:	00000000 	.word	0x00000000

08002470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <pxCurrentTCBConst2>)
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	6808      	ldr	r0, [r1, #0]
 8002476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800247a:	f380 8809 	msr	PSP, r0
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f380 8811 	msr	BASEPRI, r0
 800248a:	f04e 0e0d 	orr.w	lr, lr, #13
 800248e:	4770      	bx	lr

08002490 <pxCurrentTCBConst2>:
 8002490:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop

08002498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002498:	4806      	ldr	r0, [pc, #24]	; (80024b4 <prvPortStartFirstTask+0x1c>)
 800249a:	6800      	ldr	r0, [r0, #0]
 800249c:	6800      	ldr	r0, [r0, #0]
 800249e:	f380 8808 	msr	MSP, r0
 80024a2:	b662      	cpsie	i
 80024a4:	b661      	cpsie	f
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	df00      	svc	0
 80024b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80024b2:	bf00      	nop
 80024b4:	e000ed08 	.word	0xe000ed08

080024b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80024be:	4b32      	ldr	r3, [pc, #200]	; (8002588 <xPortStartScheduler+0xd0>)
 80024c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	22ff      	movs	r2, #255	; 0xff
 80024ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <xPortStartScheduler+0xd4>)
 80024e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <xPortStartScheduler+0xd8>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024ec:	e009      	b.n	8002502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80024ee:	4b28      	ldr	r3, [pc, #160]	; (8002590 <xPortStartScheduler+0xd8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <xPortStartScheduler+0xd8>)
 80024f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b80      	cmp	r3, #128	; 0x80
 800250c:	d0ef      	beq.n	80024ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <xPortStartScheduler+0xd8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	d00a      	beq.n	8002530 <xPortStartScheduler+0x78>
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	60bb      	str	r3, [r7, #8]
}
 800252c:	bf00      	nop
 800252e:	e7fe      	b.n	800252e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <xPortStartScheduler+0xd8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	4a16      	ldr	r2, [pc, #88]	; (8002590 <xPortStartScheduler+0xd8>)
 8002538:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <xPortStartScheduler+0xd8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002542:	4a13      	ldr	r2, [pc, #76]	; (8002590 <xPortStartScheduler+0xd8>)
 8002544:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <xPortStartScheduler+0xdc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a10      	ldr	r2, [pc, #64]	; (8002594 <xPortStartScheduler+0xdc>)
 8002554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <xPortStartScheduler+0xdc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <xPortStartScheduler+0xdc>)
 8002560:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002564:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002566:	f000 f8b9 	bl	80026dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <xPortStartScheduler+0xe0>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002570:	f7ff ff92 	bl	8002498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002574:	f7ff fd6a 	bl	800204c <vTaskSwitchContext>
	prvTaskExitError();
 8002578:	f7ff ff4c 	bl	8002414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e400 	.word	0xe000e400
 800258c:	20000428 	.word	0x20000428
 8002590:	2000042c 	.word	0x2000042c
 8002594:	e000ed20 	.word	0xe000ed20
 8002598:	20000018 	.word	0x20000018

0800259c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	607b      	str	r3, [r7, #4]
}
 80025b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <vPortEnterCritical+0x58>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <vPortEnterCritical+0x58>)
 80025be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <vPortEnterCritical+0x58>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10f      	bne.n	80025e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <vPortEnterCritical+0x5c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	603b      	str	r3, [r7, #0]
}
 80025e4:	bf00      	nop
 80025e6:	e7fe      	b.n	80025e6 <vPortEnterCritical+0x4a>
	}
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000018 	.word	0x20000018
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <vPortExitCritical+0x4c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <vPortExitCritical+0x24>
	__asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	607b      	str	r3, [r7, #4]
}
 800261c:	bf00      	nop
 800261e:	e7fe      	b.n	800261e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <vPortExitCritical+0x4c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <vPortExitCritical+0x4c>)
 8002628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <vPortExitCritical+0x4c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <vPortExitCritical+0x42>
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800263c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000018 	.word	0x20000018
 800264c:	00000000 	.word	0x00000000

08002650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002650:	f3ef 8009 	mrs	r0, PSP
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <pxCurrentTCBConst>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002660:	6010      	str	r0, [r2, #0]
 8002662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800266a:	f380 8811 	msr	BASEPRI, r0
 800266e:	f7ff fced 	bl	800204c <vTaskSwitchContext>
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f380 8811 	msr	BASEPRI, r0
 800267a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	6808      	ldr	r0, [r1, #0]
 8002682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002686:	f380 8809 	msr	PSP, r0
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	4770      	bx	lr

08002690 <pxCurrentTCBConst>:
 8002690:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop

08002698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	607b      	str	r3, [r7, #4]
}
 80026b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80026b2:	f7ff fc0d 	bl	8001ed0 <xTaskIncrementTick>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <xPortSysTickHandler+0x40>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	2300      	movs	r3, #0
 80026c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f383 8811 	msr	BASEPRI, r3
}
 80026ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	e000ed04 	.word	0xe000ed04

080026dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <vPortSetupTimerInterrupt+0x30>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <vPortSetupTimerInterrupt+0x34>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <vPortSetupTimerInterrupt+0x38>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <vPortSetupTimerInterrupt+0x3c>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	4a08      	ldr	r2, [pc, #32]	; (800271c <vPortSetupTimerInterrupt+0x40>)
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <vPortSetupTimerInterrupt+0x30>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	e000e010 	.word	0xe000e010
 8002710:	e000e018 	.word	0xe000e018
 8002714:	20000010 	.word	0x20000010
 8002718:	10624dd3 	.word	0x10624dd3
 800271c:	e000e014 	.word	0xe000e014

08002720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800272c:	f7ff fb26 	bl	8001d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002730:	4b58      	ldr	r3, [pc, #352]	; (8002894 <pvPortMalloc+0x174>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002738:	f000 f910 	bl	800295c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800273c:	4b56      	ldr	r3, [pc, #344]	; (8002898 <pvPortMalloc+0x178>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 808e 	bne.w	8002866 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01d      	beq.n	800278c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002750:	2208      	movs	r2, #8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	2b00      	cmp	r3, #0
 8002760:	d014      	beq.n	800278c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f023 0307 	bic.w	r3, r3, #7
 8002768:	3308      	adds	r3, #8
 800276a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <pvPortMalloc+0x6c>
	__asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	617b      	str	r3, [r7, #20]
}
 8002788:	bf00      	nop
 800278a:	e7fe      	b.n	800278a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d069      	beq.n	8002866 <pvPortMalloc+0x146>
 8002792:	4b42      	ldr	r3, [pc, #264]	; (800289c <pvPortMalloc+0x17c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	d864      	bhi.n	8002866 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800279c:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <pvPortMalloc+0x180>)
 800279e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80027a0:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <pvPortMalloc+0x180>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027a6:	e004      	b.n	80027b2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d903      	bls.n	80027c4 <pvPortMalloc+0xa4>
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f1      	bne.n	80027a8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <pvPortMalloc+0x174>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d04b      	beq.n	8002866 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2208      	movs	r2, #8
 80027d4:	4413      	add	r3, r2
 80027d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1ad2      	subs	r2, r2, r3
 80027e8:	2308      	movs	r3, #8
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d91f      	bls.n	8002830 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <pvPortMalloc+0xf8>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	613b      	str	r3, [r7, #16]
}
 8002814:	bf00      	nop
 8002816:	e7fe      	b.n	8002816 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800282a:	69b8      	ldr	r0, [r7, #24]
 800282c:	f000 f8f8 	bl	8002a20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <pvPortMalloc+0x17c>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <pvPortMalloc+0x17c>)
 800283c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <pvPortMalloc+0x17c>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <pvPortMalloc+0x184>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d203      	bcs.n	8002852 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <pvPortMalloc+0x17c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <pvPortMalloc+0x184>)
 8002850:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <pvPortMalloc+0x178>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	431a      	orrs	r2, r3
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002866:	f7ff fa97 	bl	8001d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <pvPortMalloc+0x16a>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	60fb      	str	r3, [r7, #12]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <pvPortMalloc+0x168>
	return pvReturn;
 800288a:	69fb      	ldr	r3, [r7, #28]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20001038 	.word	0x20001038
 8002898:	20001044 	.word	0x20001044
 800289c:	2000103c 	.word	0x2000103c
 80028a0:	20001030 	.word	0x20001030
 80028a4:	20001040 	.word	0x20001040

080028a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d048      	beq.n	800294c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80028ba:	2308      	movs	r3, #8
 80028bc:	425b      	negs	r3, r3
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4413      	add	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <vPortFree+0xac>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <vPortFree+0x44>
	__asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	60fb      	str	r3, [r7, #12]
}
 80028e8:	bf00      	nop
 80028ea:	e7fe      	b.n	80028ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <vPortFree+0x62>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	60bb      	str	r3, [r7, #8]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <vPortFree+0xac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d019      	beq.n	800294c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d115      	bne.n	800294c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <vPortFree+0xac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002930:	f7ff fa24 	bl	8001d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <vPortFree+0xb0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4413      	add	r3, r2
 800293e:	4a06      	ldr	r2, [pc, #24]	; (8002958 <vPortFree+0xb0>)
 8002940:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002942:	6938      	ldr	r0, [r7, #16]
 8002944:	f000 f86c 	bl	8002a20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002948:	f7ff fa26 	bl	8001d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20001044 	.word	0x20001044
 8002958:	2000103c 	.word	0x2000103c

0800295c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002962:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002966:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002968:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <prvHeapInit+0xac>)
 800296a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3307      	adds	r3, #7
 800297a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0307 	bic.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <prvHeapInit+0xac>)
 800298c:	4413      	add	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002994:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <prvHeapInit+0xb0>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <prvHeapInit+0xb0>)
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4413      	add	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80029a8:	2208      	movs	r2, #8
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0307 	bic.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <prvHeapInit+0xb4>)
 80029bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <prvHeapInit+0xb4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <prvHeapInit+0xb4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	1ad2      	subs	r2, r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <prvHeapInit+0xb4>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <prvHeapInit+0xb8>)
 80029ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <prvHeapInit+0xbc>)
 80029f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <prvHeapInit+0xc0>)
 80029f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000430 	.word	0x20000430
 8002a0c:	20001030 	.word	0x20001030
 8002a10:	20001038 	.word	0x20001038
 8002a14:	20001040 	.word	0x20001040
 8002a18:	2000103c 	.word	0x2000103c
 8002a1c:	20001044 	.word	0x20001044

08002a20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <prvInsertBlockIntoFreeList+0xa8>)
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e002      	b.n	8002a34 <prvInsertBlockIntoFreeList+0x14>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d8f7      	bhi.n	8002a2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4413      	add	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d108      	bne.n	8002a62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	441a      	add	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d118      	bne.n	8002aa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <prvInsertBlockIntoFreeList+0xac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d00d      	beq.n	8002a9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	441a      	add	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e008      	b.n	8002ab0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <prvInsertBlockIntoFreeList+0xac>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e003      	b.n	8002ab0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d002      	beq.n	8002abe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	20001030 	.word	0x20001030
 8002acc:	20001038 	.word	0x20001038

08002ad0 <atoi>:
 8002ad0:	220a      	movs	r2, #10
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	f000 b87e 	b.w	8002bd4 <strtol>

08002ad8 <_strtol_l.constprop.0>:
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ade:	4686      	mov	lr, r0
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	d001      	beq.n	8002ae8 <_strtol_l.constprop.0+0x10>
 8002ae4:	2b24      	cmp	r3, #36	; 0x24
 8002ae6:	d906      	bls.n	8002af6 <_strtol_l.constprop.0+0x1e>
 8002ae8:	f000 f886 	bl	8002bf8 <__errno>
 8002aec:	2316      	movs	r3, #22
 8002aee:	6003      	str	r3, [r0, #0]
 8002af0:	2000      	movs	r0, #0
 8002af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af6:	460d      	mov	r5, r1
 8002af8:	4835      	ldr	r0, [pc, #212]	; (8002bd0 <_strtol_l.constprop.0+0xf8>)
 8002afa:	462a      	mov	r2, r5
 8002afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002b00:	5d06      	ldrb	r6, [r0, r4]
 8002b02:	f016 0608 	ands.w	r6, r6, #8
 8002b06:	d1f8      	bne.n	8002afa <_strtol_l.constprop.0+0x22>
 8002b08:	2c2d      	cmp	r4, #45	; 0x2d
 8002b0a:	d12e      	bne.n	8002b6a <_strtol_l.constprop.0+0x92>
 8002b0c:	2601      	movs	r6, #1
 8002b0e:	782c      	ldrb	r4, [r5, #0]
 8002b10:	1c95      	adds	r5, r2, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d057      	beq.n	8002bc6 <_strtol_l.constprop.0+0xee>
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d109      	bne.n	8002b2e <_strtol_l.constprop.0+0x56>
 8002b1a:	2c30      	cmp	r4, #48	; 0x30
 8002b1c:	d107      	bne.n	8002b2e <_strtol_l.constprop.0+0x56>
 8002b1e:	782a      	ldrb	r2, [r5, #0]
 8002b20:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002b24:	2a58      	cmp	r2, #88	; 0x58
 8002b26:	d149      	bne.n	8002bbc <_strtol_l.constprop.0+0xe4>
 8002b28:	2310      	movs	r3, #16
 8002b2a:	786c      	ldrb	r4, [r5, #1]
 8002b2c:	3502      	adds	r5, #2
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8002b34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002b38:	fbbc f9f3 	udiv	r9, ip, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	fb03 ca19 	mls	sl, r3, r9, ip
 8002b42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002b46:	2f09      	cmp	r7, #9
 8002b48:	d814      	bhi.n	8002b74 <_strtol_l.constprop.0+0x9c>
 8002b4a:	463c      	mov	r4, r7
 8002b4c:	42a3      	cmp	r3, r4
 8002b4e:	dd20      	ble.n	8002b92 <_strtol_l.constprop.0+0xba>
 8002b50:	1c57      	adds	r7, r2, #1
 8002b52:	d007      	beq.n	8002b64 <_strtol_l.constprop.0+0x8c>
 8002b54:	4581      	cmp	r9, r0
 8002b56:	d319      	bcc.n	8002b8c <_strtol_l.constprop.0+0xb4>
 8002b58:	d101      	bne.n	8002b5e <_strtol_l.constprop.0+0x86>
 8002b5a:	45a2      	cmp	sl, r4
 8002b5c:	db16      	blt.n	8002b8c <_strtol_l.constprop.0+0xb4>
 8002b5e:	2201      	movs	r2, #1
 8002b60:	fb00 4003 	mla	r0, r0, r3, r4
 8002b64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002b68:	e7eb      	b.n	8002b42 <_strtol_l.constprop.0+0x6a>
 8002b6a:	2c2b      	cmp	r4, #43	; 0x2b
 8002b6c:	bf04      	itt	eq
 8002b6e:	782c      	ldrbeq	r4, [r5, #0]
 8002b70:	1c95      	addeq	r5, r2, #2
 8002b72:	e7ce      	b.n	8002b12 <_strtol_l.constprop.0+0x3a>
 8002b74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002b78:	2f19      	cmp	r7, #25
 8002b7a:	d801      	bhi.n	8002b80 <_strtol_l.constprop.0+0xa8>
 8002b7c:	3c37      	subs	r4, #55	; 0x37
 8002b7e:	e7e5      	b.n	8002b4c <_strtol_l.constprop.0+0x74>
 8002b80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002b84:	2f19      	cmp	r7, #25
 8002b86:	d804      	bhi.n	8002b92 <_strtol_l.constprop.0+0xba>
 8002b88:	3c57      	subs	r4, #87	; 0x57
 8002b8a:	e7df      	b.n	8002b4c <_strtol_l.constprop.0+0x74>
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	e7e8      	b.n	8002b64 <_strtol_l.constprop.0+0x8c>
 8002b92:	1c53      	adds	r3, r2, #1
 8002b94:	d108      	bne.n	8002ba8 <_strtol_l.constprop.0+0xd0>
 8002b96:	2322      	movs	r3, #34	; 0x22
 8002b98:	4660      	mov	r0, ip
 8002b9a:	f8ce 3000 	str.w	r3, [lr]
 8002b9e:	f1b8 0f00 	cmp.w	r8, #0
 8002ba2:	d0a6      	beq.n	8002af2 <_strtol_l.constprop.0+0x1a>
 8002ba4:	1e69      	subs	r1, r5, #1
 8002ba6:	e006      	b.n	8002bb6 <_strtol_l.constprop.0+0xde>
 8002ba8:	b106      	cbz	r6, 8002bac <_strtol_l.constprop.0+0xd4>
 8002baa:	4240      	negs	r0, r0
 8002bac:	f1b8 0f00 	cmp.w	r8, #0
 8002bb0:	d09f      	beq.n	8002af2 <_strtol_l.constprop.0+0x1a>
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	d1f6      	bne.n	8002ba4 <_strtol_l.constprop.0+0xcc>
 8002bb6:	f8c8 1000 	str.w	r1, [r8]
 8002bba:	e79a      	b.n	8002af2 <_strtol_l.constprop.0+0x1a>
 8002bbc:	2430      	movs	r4, #48	; 0x30
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1b5      	bne.n	8002b2e <_strtol_l.constprop.0+0x56>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	e7b3      	b.n	8002b2e <_strtol_l.constprop.0+0x56>
 8002bc6:	2c30      	cmp	r4, #48	; 0x30
 8002bc8:	d0a9      	beq.n	8002b1e <_strtol_l.constprop.0+0x46>
 8002bca:	230a      	movs	r3, #10
 8002bcc:	e7af      	b.n	8002b2e <_strtol_l.constprop.0+0x56>
 8002bce:	bf00      	nop
 8002bd0:	08002c8a 	.word	0x08002c8a

08002bd4 <strtol>:
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	460a      	mov	r2, r1
 8002bd8:	4601      	mov	r1, r0
 8002bda:	4802      	ldr	r0, [pc, #8]	; (8002be4 <strtol+0x10>)
 8002bdc:	6800      	ldr	r0, [r0, #0]
 8002bde:	f7ff bf7b 	b.w	8002ad8 <_strtol_l.constprop.0>
 8002be2:	bf00      	nop
 8002be4:	20000068 	.word	0x20000068

08002be8 <memset>:
 8002be8:	4603      	mov	r3, r0
 8002bea:	4402      	add	r2, r0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <memset+0xa>
 8002bf0:	4770      	bx	lr
 8002bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bf6:	e7f9      	b.n	8002bec <memset+0x4>

08002bf8 <__errno>:
 8002bf8:	4b01      	ldr	r3, [pc, #4]	; (8002c00 <__errno+0x8>)
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000068 	.word	0x20000068

08002c04 <__libc_init_array>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	2600      	movs	r6, #0
 8002c08:	4d0c      	ldr	r5, [pc, #48]	; (8002c3c <__libc_init_array+0x38>)
 8002c0a:	4c0d      	ldr	r4, [pc, #52]	; (8002c40 <__libc_init_array+0x3c>)
 8002c0c:	1b64      	subs	r4, r4, r5
 8002c0e:	10a4      	asrs	r4, r4, #2
 8002c10:	42a6      	cmp	r6, r4
 8002c12:	d109      	bne.n	8002c28 <__libc_init_array+0x24>
 8002c14:	f000 f81a 	bl	8002c4c <_init>
 8002c18:	2600      	movs	r6, #0
 8002c1a:	4d0a      	ldr	r5, [pc, #40]	; (8002c44 <__libc_init_array+0x40>)
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	; (8002c48 <__libc_init_array+0x44>)
 8002c1e:	1b64      	subs	r4, r4, r5
 8002c20:	10a4      	asrs	r4, r4, #2
 8002c22:	42a6      	cmp	r6, r4
 8002c24:	d105      	bne.n	8002c32 <__libc_init_array+0x2e>
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2c:	4798      	blx	r3
 8002c2e:	3601      	adds	r6, #1
 8002c30:	e7ee      	b.n	8002c10 <__libc_init_array+0xc>
 8002c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c36:	4798      	blx	r3
 8002c38:	3601      	adds	r6, #1
 8002c3a:	e7f2      	b.n	8002c22 <__libc_init_array+0x1e>
 8002c3c:	08002d8c 	.word	0x08002d8c
 8002c40:	08002d8c 	.word	0x08002d8c
 8002c44:	08002d8c 	.word	0x08002d8c
 8002c48:	08002d90 	.word	0x08002d90

08002c4c <_init>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr

08002c58 <_fini>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr
